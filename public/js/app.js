// Generated by CoffeeScript 1.6.2
(function() {
  var Message, Room;

  $(function() {
    Room.checkWs();
    window.room = new Room("ws://" + window.location.host + window.location.pathname + "/chatting");
    room.ws_conn.onopen = room.joinRoom();
    room.ws_conn.onmessage = function(e) {
      return room.reveiveMessage(e);
    };
    return $('#sayit-button').click(function() {
      var message, text;

      text = $('#chat-form').val();
      if (text) {
        message = new Message("text", text);
        return room.sendMessage(message);
      } else {

      }
    });
  });

  Room = (function() {
    function Room(ws_url) {
      this.ws_url = ws_url;
      this.ws_conn = new WebSocket(this.ws_url);
      this.userlist = [];
    }

    Room.checkWs = function() {
      if (!window.WebSocket) {
        alert("you brower is not support websocket");
      }
    };

    Room.prototype.roomAddr = function() {
      return console.log(this.ws_url);
    };

    Room.prototype.joinRoom = function() {
      var message;

      return message = new Message("join", "" + (this.currentUser()) + " has join room");
    };

    Room.prototype.currentUser = function() {
      return $("#user-name").text();
    };

    Room.prototype.sendMessage = function(message) {
      if (!this.ws_conn) {
        return;
      }
      this.ws_conn.send(JSON.stringify(message));
      return $('#chat-form').val('');
    };

    Room.prototype.reveiveMessage = function(e) {
      var message;

      message = $.parseJSON(e.data);
      if (message.Type === "join") {
        this.addUserToList(message.User);
      }
      if (message.Type === "leave") {
        this.removeUserFromList(message.User);
      }
      return console.log(message);
    };

    Room.prototype.getUsersList = function() {
      var url,
        _this = this;

      url = window.location.pathname + "/users.json";
      $.getJSON(url, function(data) {
        if (data.Users !== null) {
          return _this.userlist = data.Users;
        }
      });
      return this.userlist;
    };

    Room.prototype.addUserToList = function(user) {
      var names;

      names = [];
      $("#userlist>ul>li").each(function() {
        return names.push($(this).text());
      });
      if (names.indexOf(user.Name) === -1) {
        return $("#userlist>ul").append($("<li><img src=" + user.Avatar + "/>" + user.Name + "</li>"));
      }
    };

    Room.prototype.removeUserFromList = function(user) {
      return $("#userlist>ul>li").each(function() {
        if ($(this).text() === user.Name) {
          return $(this).remove();
        }
      });
    };

    return Room;

  })();

  Message = (function() {
    function Message(type, text) {
      this.type = type;
      this.text = text;
    }

    return Message;

  })();

}).call(this);
